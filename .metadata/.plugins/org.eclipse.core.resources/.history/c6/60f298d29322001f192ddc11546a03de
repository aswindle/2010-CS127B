/**
 * MineSweeper
 *
 * @author: Alexander "Apollon" Jerabek
 *
 *          All of the methods are necessary for the model to implement for a
 *          fully functional GUI to exist. TODO All methods are written as stubs
 *          so the code compiles. TODO Complete all methods so they always do
 *          the right thing
 */
public class MineSweeper implements MineSweeperModel {

    // TODO: Arrange constructor for easy testing of known boards

    // This constructor is required for 100% problem coverage
    public MineSweeper(boolean[][] boardWithMinesSetAsTrue) {
        // Given a 2D array of booleans where true means there is a mine
        // and false means there is no mine, set up the game board so the
        // squares
        // know how many mines surround it.
    }

    // This constructor is required for 100% problem coverage (and to run the
    // GUI)
    public MineSweeper(int rows, int columns, int numberOfMinesToBePlaced) {
        // TODO Arrange constructor for custom boards with mines placed
        // randomly.
        // TODO Call this at least once in your unit test for 100% code coverage
    }

    /**
     * This method alerts the Game Board the user has clicked on the square at
     * the given row/column. There are three possibilities:
     *
     * 1) The square is a mine.
     *
     * 2) The square is a square next to a mine (a "number" square.)
     *
     * 3) The square is not adjacent to any mines (a "blank" square.)
     *
     * Because MineSweeper automatically clears all squares adjacent to any
     * blank square connected to the square clicked, a special algorithm is
     * needed to set the proper part of the board visible. The psuedo-code shows
     * the suggested algorithm on the project specification.
     *
     * @param row
     *            - An int value representing the row (x) value in the game
     *            board.
     *
     * @param column
     *            - An int value representing the column (y)
     *
     *            value in the game board.
     *
     */
    public void click(int row, int column) {
         // TODO: Implement this suggested algorithm
         // Check special cases first
         // ----if square is a mine
         // ------record loss
         // ----if square is visible or flagged
		 // ------return // nothing to do
		 // ----else if square has 1 or more mines near it
		 // ------mark square as visible
		 // ----else
         // ------push the square onto the stack
         // ------mark square as visible
         // ------while the stack is not empty
         // --------pop the stack and mark square as current location
         // --------if square is a number
         // ----------do nothing
         // --------else // square has no mines
         // ----------for each adjacent square
         // ------------if it's visible or flagged
         // ---------------ignore it
         // ------------else
         // ---------------push on stack
         // ---------------mark square as visible
    }

    /**
     * getAdjacentMines returns the number of mines surrounding the current
     * square (the "number" on the square. A square with a mine need not know
     * the correct number of surrounding mines, as it will never display that
     * information.
     *
     * @param row
     *            - An int value representing the row (x) value in the game
     *            board.
     *
     * @param column
     *            - An int value representing the column (y) value in the game
     *            board.
     *
     * @return The number of mines next to this square.
     */
    public int getAdjacentMines(int row, int column) {
        // TODO Auto-generated method stub
        return 0;
    }

    /**
     * Returns a textual representation of the GameBoard. Squares will be
     * represented by one character followed by a space, except the last
     * character which will have no following space. Squares will either be the
     * number of mines next to the square (0) if no mines are adjacent, or a '*'
     * character for a mine. Newlines will separate each row of the game board.
     *
     * @return A String representation of the game board data.
     */
    public String toString() {
        // TODO Complete for a textual view
        return "under construction";
    }

    /**
     * This method returns the number of mines found in the game board.
     *
     * @return The number of mines.
     */
    public int getTotalMineCount() {
        return 0;
    }

    /**
     * This method determines if the square in question is a mine.
     *
     * @param row
     *            - An int value representing the row (x) value in the game
     *            board.
     *
     * @param column
     *            - An int value representing the column (y) value in the game
     *            board.
     *
     * @return A boolean representing the mine status of the square.
     */
    public boolean isMine(int row, int column) {
        // TODO Auto-generated method stub
        return false;
    }

    /**
     * This method gets the visibility of the square in question. Visibilty is
     * initially defined for all squares to be false and uncovered when the
     * click method checks the square.
     *
     * @param row
     *            - An int value representing the row (x) value in the game
     *            board.
     *
     * @param column
     *            - An int value representing the column (y) value in the game
     *            board.
     *
     * @return A boolean representing whether or not the square is set to be
     *         visible.
     */

    public boolean isVisible(int row, int column) {
        // TODO Auto-generated method stub
        return false;
    }

    /**
     * This method returns whether or not the square has been flagged by the
     * user. Flags are a tool used by players to quickly tell which squares they
     * think contain mines as well as prevent accidental clicking on those
     * squares.
     *
     * @param row
     *            - An int value representing the row (x) value in the game
     *            board.
     *
     * @param column
     *            - An int value representing the column (y) value in the game
     *            board.
     *
     * @return A boolean value representing the flagged state of this location.
     */
    public boolean isFlagged(int row, int column) {
        // TODO Auto-generated method stub
        return false;
    }

    /**
     * This method toggles whether or not the square has been flagged by the
     * user. Flags are a tool used by players to quickly tell which squares they
     * think contain mines as well as prevent accidental clicking on those
     * squares. If the flagged attribute is false, this message makes it true.
     * If the flagged attribute is true, this message makes it false.
     *
     * @param row
     *            - An int value representing the row (x) value in the game
     *            board.
     *
     * @param column
     *            - An int value representing the column (y) value in the game
     *            board.
     */
    public void toggleFlagged(int row, int column) {
        // TODO Auto-generated method stub
    }

    /**
     * This method determines if the player has lost on the current board. A
     * player loses if and only if they have clicked on a mine.
     *
     * @return A boolean representing player failure.
     */
    public boolean lost() {
        // TODO Auto-generated method stub
        return false;
    }

    /**
     * This method determines if a player has won the game. Winning means all
     * non-mine squares are visible and no mines have been detonated.
     *
     * @return A boolean representing whether or not the player has won.
     */
    public boolean won() {
        // TODO Auto-generated method stub
        return false;
    }
}