import java.io.File;
import java.io.FileNotFoundException;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class Boggle {
	
	private DiceTray tray;
	private int score;
	private List<String> wordsPossible;
	private List<String> wordsRight;
	private List<String> wordsFound;
	
	public Boggle(){
		tray = new DiceTray();
		score = 0;
		buildPossible();
	}
	
	public void setDiceTray(DiceTray dt){
		this.tray = dt;
	}
	
	public String getDiceTrayAsString(){
		return tray.toString();
	}
	
	public void buildPossible(){
		Scanner scan = null;
		try {
			scan = new Scanner(new File("BoggleWords.txt"));
			System.out.println("found file");
		} catch (FileNotFoundException e) {
		}
		while(scan.hasNextLine()){
			String cur = scan.nextLine();
			if(tray.stringFound(cur.trim())){
				wordsPossible.add(cur.trim());
			}
		}
	}
	
	public void addGuess(String guess){
		guess = guess.toLowerCase();
		if(!wordsFound.contains(guess)) wordsFound.add(guess);
	}
	
	public void buildWordsRight(){
		Collections.sort(wordsFound);
		for(int i=0; i<wordsFound.size(); i++){
			if(Collections.binarySearch(wordsPossible, wordsFound.get(i))>=0){
				String temp = wordsFound.get(i);
				wordsFound.remove(temp);
				wordsPossible.remove(temp);
				wordsRight.add(temp);
				if(temp.length()<5) score ++;
				else if(temp.length()==5) score+=2;
				else if(temp.length()==6) score+=3;
				else if(temp.length()==7) score+=5;
				else score+=11;
			}
		}
	}
	
	public int getScore(){
		return score;
	}
	
	public List<String> getWordsFound(){
		buildWordsRight();
		return wordsRight;
	}
	
	public List<String> getWordsIncorrect(){
		return (List<String>) wordsFound;
	} 
	
	public List<String> getWordsNotGuessed(){
		return (List<String>) wordsPossible;
	}
}