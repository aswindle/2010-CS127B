import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;

/**
 * A model for the game of 20 questions
 * 
 * @author Rick Mercer
 */
public class GameTree {

	/**
	 * BinaryTreeNode inner class used to create new nodes in the GameTree.
	 */
	private class TreeNode {
		private String data;
		private TreeNode left;
		private TreeNode right;

		TreeNode(String theData) {
			data = theData;
			left = null;
			right = null;
		}

		TreeNode(String theData, TreeNode leftLink, TreeNode rightLink) {
			data = theData;
			left = leftLink;
			right = rightLink;
		}
	}

	/**
	 * instance variables.
	 */
	private TreeNode root;
	private TreeNode curr;
	private Scanner scan;
	private String currentFileName;

	/**
	 * Constructor needed to create the game.
	 * 
	 * @param name
	 *            this is the name of the file we need to import the game
	 *            questions and answers from.
	 */
	public GameTree(String fileName) {
		currentFileName = fileName;
		try {
			scan = new Scanner(new File(currentFileName));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		root = build();
		curr = root;
		scan.close();
	}

	private TreeNode build() {
		if (!scan.hasNext())
			return null;
		// There must be at least one more token in the scanner
		String line = scan.nextLine();
		line.trim();
		if (!isQuestion(line))
			return new TreeNode(line);
		else {
			TreeNode leftSubtree = build();
			TreeNode rightSubtree = build();
			return new TreeNode(line, leftSubtree, rightSubtree);
		}
	}

	private boolean isQuestion(String test) {
		if (test.charAt(test.length() - 1) == '?')
			return true;
		return false;
	}

	/*
	 * Add a new question and answer to the currentNode. If the current node has
	 * the answer chicken, theGame.add("Does it swim?", "goose"); should change
	 * that node like this:
	 */
	// -----------Feathers?-----------------Feathers?------
	// -------------/----\------------------/-------\------
	// ------- chicken horse-----Does it swim?-----horse--
	// -----------------------------/------\---------------
	// --------------------------goose--chicken-----------
	/**
	 * @param newQuestion
	 *            The question to add where the old answer was.
	 * @param newAnswer
	 *            The new Yes answer for the new question.
	 */
	public void add(String newQuestion, String newAnswer) {
		String temp = curr.data;
		curr.data = newQuestion;
		curr.left = new TreeNode(newAnswer);
		curr.right = new TreeNode(temp);
	}

	/**
	 * True if getCurrent() returns an answer rather than a question.
	 * 
	 * @return False if the current node is an internal node rather than an
	 *         answer at a leaf.
	 */
	public boolean foundAnswer() {
		if(isQuestion(getCurrent())) return false;
		return true;
	}

	/**
	 * Return the data for the current node, which could be a question or an
	 * answer.
	 * 
	 * @return The current question or answer.
	 */
	public String getCurrent() {
		return curr.data;
	}

	/**
	 * Ask the game to update the current node by going left for Choice.yes or
	 * right for Choice.no Example code: theGame.playerSelected(Choice.Yes);
	 * 
	 * @param yesOrNo
	 */
	public void playerSelected(Choice answer) {
		if(answer == Choice.Yes) curr = curr.left;
		else curr = curr.right;
	}

	/**
	 * Begin a game at the root of the tree. getCurrent should return the
	 * question at the root of this GameTree.
	 */
	public void reStart() {
		curr = root;
	}

	/**
	 * Overwrite the old file for this gameTree with the current state that may
	 * have new questions added since the game started.
	 * 
	 */
	public void saveGame() {
		// TODO: Complete this method
	}

	@Override
	public String toString() {
		return toStringHelp(root);
	}

	private String toStringHelp(TreeNode curr) {
		if(curr==null) return "";
		else {
			return "- " + toStringHelp(curr.right) + curr.data + '\n' + toStringHelp(curr.left);   
		}
	}
	
	
}