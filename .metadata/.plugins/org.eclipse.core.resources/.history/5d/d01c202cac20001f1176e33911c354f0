import java.util.NoSuchElementException;

public class LinkedQueue<E> implements OurQueue<E> {

	private class Node {

		// Instance vars
		private E data;
		private Node next;

		// Constructor for Node
		public Node(E element, Node link) {
			data = element;
			next = link;
		}
	}

	private Node first;
	private Node back;
	private int size = 0;

	public LinkedQueue() {
		first = null;
		back = first;
		size = 0;
	}

	@Override
	public void add(E newEl) {
		if (size == 0) {
			first = new Node(newEl, null);
			back = first;
		} else
			back.next = new Node(newEl, null);
		size++;
	}

	@Override
	public boolean isEmpty() {
		if (size == 0)
			return true;
		else
			return false;
	}

	@Override
	public E peek() throws NoSuchElementException {
		if(size==0) throw new NoSuchElementException();
		else return first.data;
	}

	@Override
	public E remove() throws NoSuchElementException {
		if(size==0) throw new NoSuchElementException();
		else{
			E temp = first.data;
			first = first.next;
			size--;
			if(size==1){
				back = first;
			}
			return temp;
		}
	}
	
	public String toString(){
		String toString="";
		while(size>0){
			toString+=remove()+" ");
		}
		System.out.println();
		return toString;
	}

}
